__NUXT_JSONP__("/articles/flutter-project-2", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am){return {data:[{article:{slug:"flutter-project-2",description:"Flutter에서 제공하는 기본 라이브러리를 이용한 UI 레이아웃 구성을 알아봅니다.",title:"Flutter CH2. Flutter로 구성하는 UI 알아보기",category:"Application",author:H,toc:[{id:R,depth:z,text:S},{id:T,depth:z,text:U},{id:V,depth:z,text:W},{id:A,depth:z,text:A}],body:{type:"root",children:[{type:b,tag:q,props:{className:[I]},children:[{type:b,tag:J,props:{className:[K,L]},children:[{type:b,tag:h,props:{},children:[{type:a,value:j},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,Y]},children:[{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:"'Hello World!'"}]}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Google은 "},{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 의 기본 라이브러리로 직접 UI 위젯을 구성할 수 있도록 지원하고 있습니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"애플리케이션이 실행되는 플랫폼의 OEM 위젯을 호출하던 다른 크로스플랫폼 라이브러리들과는 달리,\n자체적으로 개발한 Skia 엔진을 이용해 애플리케이션에 구성된 레이아웃 위젯을 직접 렌더링하는 구조를 채택하고 있는데요,"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"오늘 포스팅에서는 이러한 레이아웃을 구성하기 위한 "},{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 의 기본 디자인 라이브러리에 대한 소개를 다루어보도록 하겠습니다."}]},{type:a,value:e},{type:b,tag:B,props:{id:R},children:[{type:b,tag:p,props:{href:"#1-%ED%94%8C%EB%9E%AB%ED%8F%BC%EB%B3%84-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%BB%A8%EC%85%89-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0",ariaHidden:s,tabIndex:t},children:[{type:b,tag:c,props:{className:[u,v]},children:[]}]},{type:a,value:S}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 에서 지원하는 디자인 라이브러리를 알아보기에 앞서, 현존하는 다양한 운영체제 플랫폼들 중,\n가장 대표적인 3가지인 Android, iOS, Windows 각각의 디자인 컨셉에 대해 이야기해보고자 합니다."}]},{type:a,value:e},{type:b,tag:M,props:{id:"google-android--material"},children:[{type:b,tag:p,props:{href:"#google-android--material",ariaHidden:s,tabIndex:t},children:[{type:b,tag:c,props:{className:[u,v]},children:[]}]},{type:a,value:"Google Android : Material"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"먼저, Android의 경우는 지난 2014년 출시한 Material UI를 가이드라인으로 제시하고 있습니다."}]},{type:a,value:e},{type:b,tag:q,props:{style:C},children:[{type:a,value:k},{type:b,tag:i,props:{width:N,src:"\u002Fflutter-project-2\u002Fandroid_holo.jpg"},children:[]},{type:a,value:k},{type:b,tag:i,props:{width:N,src:"\u002Fflutter-project-2\u002Fandroid_material_v1.png"},children:[]},{type:a,value:k},{type:b,tag:i,props:{width:N,src:"\u002Fflutter-project-2\u002Fandroid_material_v2.png"},children:[]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:i,props:{width:"95%",src:"\u002Fflutter-project-2\u002Fandroid_material_v3.jpeg"},children:[]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"이전의 Android 시스템에서 제공했던 칙칙하고 딱딱했던 Holo UI에서 벗어나,\n훨씬 깔끔하고 간결한 Material UI가 처음 등장했을 때 굉장히 좋아했던 기억이 나네요."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"이 Material UI는 현재 V3 버전까지 여러번의 개선을 거쳐 점차 깔끔한 UI가 되어가고 있습니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"특히, Material UI V3는 배경화면의 색상에 맞추어 시스템의 전반적인 색상이 조화롭게 변화하는 Material-You 디자인이 새로이 적용되기도 했습니다."}]},{type:a,value:e},{type:b,tag:M,props:{id:"apple-ios--cupertino"},children:[{type:b,tag:p,props:{href:"#apple-ios--cupertino",ariaHidden:s,tabIndex:t},children:[{type:b,tag:c,props:{className:[u,v]},children:[]}]},{type:a,value:"Apple iOS : Cupertino"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"iOS와 iPadOS에서는 Cupertino라는 이름으로 디자인 가이드라인을 제시하고 있습니다."}]},{type:a,value:e},{type:b,tag:q,props:{style:C},children:[{type:a,value:k},{type:b,tag:i,props:{width:D,src:"\u002Fflutter-project-2\u002Fapple_ios6.png"},children:[]},{type:a,value:k},{type:b,tag:i,props:{width:D,src:"\u002Fflutter-project-2\u002Fapple_ios7.jpg"},children:[]},{type:a,value:k},{type:b,tag:i,props:{width:D,src:"\u002Fflutter-project-2\u002Fapple_ios11.png"},children:[]},{type:a,value:k},{type:b,tag:i,props:{width:D,src:"\u002Fflutter-project-2\u002Fapple_ios15.jpg"},children:[]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"지난 2013년의 iOS 7 업데이트 이후로 플랫한 느낌을 살리는 디자인이 채택되었는데,\n그것을 기반으로 현재의 iOS 16까지 깔끔한 UI를 잘 유지해오고 있습니다."}]},{type:a,value:e},{type:b,tag:M,props:{id:"microsoft-windows-fluent"},children:[{type:b,tag:p,props:{href:"#microsoft-windows-fluent",ariaHidden:s,tabIndex:t},children:[{type:b,tag:c,props:{className:[u,v]},children:[]}]},{type:a,value:"Microsoft Windows Fluent"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Microsoft의 Windows에서는 Fluent 라는 디자인 컨셉이 제시되고 있습니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"일상에서 늘 쓰는 Windows UI 이지만 Fluent 라는 이름으로 접하니 아무래도 낯선 분들이 많을 것 같은데요,"}]},{type:a,value:e},{type:b,tag:i,props:{width:O,src:"\u002Fflutter-project-2\u002Fms_windows8.jpg"},children:[]},{type:a,value:e},{type:b,tag:i,props:{width:O,src:"\u002Fflutter-project-2\u002Fms_windows10.jpg"},children:[]},{type:a,value:e},{type:b,tag:i,props:{width:O,src:"\u002Fflutter-project-2\u002Fms_windows11.png"},children:[]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Windows 8 에서 네모난 타일들로 이루어진 Metro UI를 처음 제시한 이후로,\nWindows 10 에서 Fluent 라는 이름으로 탈바꿈하더니,\n현재의 Windows 11 까지 점차 개선되는 모습을 보이고 있습니다."}]},{type:a,value:e},{type:b,tag:B,props:{id:T},children:[{type:b,tag:p,props:{href:"#2-flutter%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EB%94%94%EC%9E%90%EC%9D%B8-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC",ariaHidden:s,tabIndex:t},children:[{type:b,tag:c,props:{className:[u,v]},children:[]}]},{type:a,value:U}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"앞서 3가지의 대표적인 디자인 컨셉을 소개해드렸는데요, 이들 중 "},{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 에서는 Material과 Cupertino에 대한 디자인 라이브러리가 기본적으로 제공되고 있습니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"다른 크로스플랫폼 프레임워크에 비해 UI 통일성을 제공할 수 있다는 점에서 굉장한 장점이라고 할 수 있는데요,\n그 예시로 "},{type:b,tag:h,props:{},children:[{type:a,value:y}]},{type:a,value:" 와 한번 비교해보도록 하겠습니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:y}]},{type:a,value:" 의 경우는, 기존에 "},{type:b,tag:h,props:{},children:[{type:a,value:"React.JS"}]},{type:a,value:" 를 이용해서 웹 프론트엔드 개발을 해보신 분들이라면 익숙할 수 있는 형식으로 코드를 작성하게 됩니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"하지만, 기본적으로는 별도의 디자인 라이브러리가 있는 것이 아닌,\n컴파일 후 애플리케이션의 동작 과정에서 OS 플랫폼의 기본 OEM 위젯을 호출하는 방식으로 UI가 구성되는데요,"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"이렇게되면 애플리케이션과 OS 플랫폼 사이의 UI 통일성이 무너지게 되는 경우가 생기게 됩니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"별도의 외부 라이브러리를 사용하지 않고 기본 위젯만으로 간단한 UI를 구성해보았음에도, 플랫폼에 따른 UI 차이가 발생함을 확인할 수 있습니다."}]},{type:a,value:e},{type:b,tag:i,props:{width:"70%",src:"\u002Fflutter-project-2\u002FRN_1.png"},children:[]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"하지만 "},{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 에서는 UI를 구성하고 렌더링할 때 별도의 OEM 위젯을 호출하는 것이 아니라,\n기본 라이브러리로 구현된 위젯을 호출하게 됩니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"심지어, 기본 라이브러리로 Material과 Cupertino 모두를 지원하기에, 애플리케이션의 모든 부분에서 동일한 디자인 컨셉을 유지할 수 있다는 장점이 있죠."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"아래 스크린샷은 "},{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 의 기본 라이브러리만으로 Material과 Cupertino 각각의 UI를 구현해본 예시입니다."}]},{type:a,value:e},{type:b,tag:q,props:{style:C},children:[{type:a,value:k},{type:b,tag:i,props:{width:E,src:"\u002Fflutter-project-2\u002FFlutter_Material_1.png"},children:[]},{type:a,value:k},{type:b,tag:i,props:{width:E,src:"\u002Fflutter-project-2\u002FFlutter_Material_2.png"},children:[]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:q,props:{style:C},children:[{type:a,value:k},{type:b,tag:i,props:{width:E,src:"\u002Fflutter-project-2\u002FFlutter_Cupertino_1.png"},children:[]},{type:a,value:k},{type:b,tag:i,props:{width:E,src:"\u002Fflutter-project-2\u002FFlutter_Cupertino_2.png"},children:[]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"하지만 이렇게 모든 UI 위젯을 애플리케이션 런타임 내에서 렌더링하게되면, 가장 먼저 들 수 있는 생각이 아마 성능이 부족한 경우가 생기지 않을까 라는 생각인데요,"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"이를 위해서 Google이 자체적으로 개발한 Skia 그래픽 엔진을 이용하여, 성능상 문제를 해결하였습니다."}]},{type:a,value:e},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:y}]},{type:a,value:" 와는 다르게 모든 UI 위젯을 직접 렌더링해 통일성 문제를 해결하면서 동시에\n"},{type:b,tag:h,props:{},children:[{type:a,value:y}]},{type:a,value:" 의 큰 단점이라고 꼽히는 렌더링 성능 문제까지 함께 해결한 것이죠."}]},{type:a,value:e},{type:b,tag:B,props:{id:V},children:[{type:b,tag:p,props:{href:"#%EB%B2%88%EC%99%B8--%ED%95%98%EB%82%98%EC%9D%98-%EC%BD%94%EB%93%9C%EB%A1%9C-android%EC%99%80-ios%EC%97%90%EC%84%9C-%EC%84%9C%EB%A1%9C-%EB%8B%A4%EB%A5%B8-ui-%ED%91%9C%ED%98%84%ED%95%98%EA%B8%B0",ariaHidden:s,tabIndex:t},children:[{type:b,tag:c,props:{className:[u,v]},children:[]}]},{type:a,value:W}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 에서 기본 UI 라이브러리로 Material과 Cupertino 모두의 레이아웃 디자인을 지원하긴 하지만,\n두 플랫폼을 모두 한 디자인으로 개발하게 된다면 OS 플랫폼의 디자인과 애플리케이션의 디자인 컨셉이 매칭되지 않는 결과물이 나오게 되겠죠,"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"그래서 "},{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 에서는 기본적으로 각 플랫폼을 구분할 수 있는 함수를 제공하고 있습니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"다음 코드와 같이 "},{type:b,tag:h,props:{},children:[{type:a,value:_}]},{type:a,value:" 을 구성할 때, "},{type:b,tag:h,props:{},children:[{type:a,value:"dart:io"}]},{type:a,value:" 패키지에 기본적으로 포함되어 있는 "},{type:b,tag:h,props:{},children:[{type:a,value:$}]},{type:a,value:" 클래스를 이용해\n각 플랫폼을 인식하고 그에 따른 UI 표현을 다르게 구성할 수 있습니다."}]},{type:a,value:e},{type:b,tag:q,props:{className:[I]},children:[{type:b,tag:J,props:{className:[K,L]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aa}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:P}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:ab}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"StatefulWidget"}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:F}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,ac,r]},children:[{type:a,value:ad}]},{type:a,value:"\n  _PlatformExampleState "},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"createState"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,ae]},children:[{type:a,value:"="}]},{type:b,tag:c,props:{className:[d,ae]},children:[{type:a,value:af}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"_PlatformExampleState"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:G}]},{type:a,value:"\n\n"},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aa}]},{type:a,value:" _PlatformExampleState "},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:ab}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"State"}]},{type:b,tag:c,props:{className:[d,"generics"]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"\u003C"}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:af}]}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:F}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,ac,r]},children:[{type:a,value:ad}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:_}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"build"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"BuildContext"}]},{type:a,value:" context"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:F}]},{type:a,value:Q},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:"if"}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"."}]},{type:a,value:"isAndroid"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:F}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,ah]},children:[{type:a,value:"\u002F\u002F Material로 구현된 UI 함수가 반환되도록 지정"}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:ai}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"MaterialPage"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:Q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:G}]},{type:a,value:"\n    \n    "},{type:b,tag:c,props:{className:[d,ah]},children:[{type:a,value:"\u002F\u002F Cupertino로 구현된 UI 함수가 반환되도록 지정"}]},{type:a,value:Q},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:ai}]},{type:a,value:j},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"CupertinoPage"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:G}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:G}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"다음 스크린샷은 바로 위의 코드를 이용해서 Android 혹은 iOS인지를 구분해 각각 그에 맞는 UI 위젯을 표시하도록 구현해본 것입니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:i,props:{alt:"Flutter UI with Conditional",src:"\u002Fflutter-project-2\u002FFlutter_Conditional.png"},children:[]}]},{type:a,value:e},{type:b,tag:B,props:{id:A},children:[{type:b,tag:p,props:{href:"#%EB%A7%88%EC%B9%98%EB%A9%B0",ariaHidden:s,tabIndex:t},children:[{type:b,tag:c,props:{className:[u,v]},children:[]}]},{type:a,value:A}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"오늘은 "},{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 에서 UI 레이아웃을 구현하는 방식, 그리고 그것을 실제 애플리케이션으로 렌더링하는 구조에 대해 알아보았는데요,"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"포스팅에서 소개했던 "},{type:b,tag:h,props:{},children:[{type:a,value:y}]},{type:a,value:" 와 "},{type:b,tag:h,props:{},children:[{type:a,value:l}]},{type:a,value:" 앱의 예제 코드는 따로 제 깃허브에 업로드해두었으니, 필요하신 분들께서는 확인해보시면 좋을 것 같습니다."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:p,props:{href:"https:\u002F\u002Fgithub.com\u002Fyymin1022\u002FGDSC_Flutter_UI_Test",rel:[aj,ak,al],target:am},children:[{type:a,value:"Flutter 예제 코드"}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:p,props:{href:"https:\u002F\u002Fgithub.com\u002Fyymin1022\u002FGDSC_RN_UI_Test",rel:[aj,ak,al],target:am},children:[{type:a,value:"ReactNative 예제 코드"}]}]},{type:a,value:e},{type:b,tag:q,props:{className:[I]},children:[{type:b,tag:J,props:{className:[K,L]},children:[{type:b,tag:h,props:{},children:[{type:a,value:j},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,Y]},children:[{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:"'Bye, World!'"}]}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:e}]}]}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002Fflutter-project-2",extension:".md",createdAt:"2022-12-03T15:14:08.000Z",updatedAt:"2022-12-04T15:48:12.000Z"},prev:{slug:"ai_ml-study-ch5",title:"서포트 벡터(SVM)으로 최적의 결정 경계를 찾아보기"},next:null,member:[{slug:"yongmin",name:H,description:"Android를 시작으로 React.JS와 Node.JS를 이용한 풀스택 웹, 그리고 그 아래의 서버와 CI\u002FCD 환경을 다뤄보고 있습니다. 최근에는 Flutter에도 관심을 갖고 있어요! LR이라는 닉네임으로 온라인 활동도 하고 있습니다.",role:"Core Member",img:"yongmin.jpg",dir:"\u002Fmembers",path:"\u002Fmembers\u002Fyongmin",extension:".yaml",createdAt:"2022-10-27T11:39:05.000Z",updatedAt:"2022-10-31T16:00:14.000Z"}],authorName:H}],fetch:{},mutations:void 0}}("text","element","span","token","\n","punctuation","p","code","img"," ","\n  ","Flutter","class-name","(",")","a","div","function","true",-1,"icon","icon-link","keyword",";","React Native",3,"마치며","h3","display: flex; flex-direction: row;","25%","50%","{","}","Yongmin Yoo","nuxt-content-highlight","pre","language-dart","line-numbers","h4","30%","75%","PlatformExample","\n    ","1-플랫폼별-디자인-컨셉-알아보기","1. 플랫폼별 디자인 컨셉 알아보기","2-flutter에서-제공하는-디자인-라이브러리","2. Flutter에서 제공하는 디자인 라이브러리","번외--하나의-코드로-android와-ios에서-서로-다른-ui-표현하기","번외 : 하나의 코드로 Android와 iOS에서 서로 다른 UI 표현하기","print","string-literal","string","Widget","Platform","class","extends","metadata","@override","operator","\u003E","\n      ","comment","return","nofollow","noopener","noreferrer","_blank")));